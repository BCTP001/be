# SEARCH BOOKS

input SearchOption {
  searchQuery: String!
  queryType: String
  sort: String
  maxResult: String
}

# GET BOOK INFO

input GetBookInfoRequest {
  isbn13: String!
}

type Author {
  authorType: String
  authorid: Int
  desc: String
  name: String
}

type Ebook {
  itemId: Int
  isbn: String
  priceSales: Int
  link: String
}

type Bookinfo {
  subTitle: String
  originalTitle: String
  itemPage: Int
  toc: String
  letslookimg: [String]
  author: [Author]
  ebookList: [Ebook]
}

type GetBookInfoItem {
  title: String
  link: String
  author: String
  pubDate: String
  description: String
  creator: String
  isbn: String
  isbn13: String
  itemId: Int
  priceSales: Int
  priceStandard: Int
  stockStatus: String
  mileage: Int
  cover: String
  categoryId: Int
  categoryName: String
  publisher: String
  customerReivewRank: Int
  bookinfo: Bookinfo
}

# RECOMMEND BOOK LIST

input recommendBookListRequest {
  queryType: RecommendQueryType!
}

enum RecommendQueryType {
  ItemNewAll
  ItemNewSpecial
  Bestseller
  BlogBest
}

# FEED

type Feed {
  isbn13: String!
  bookName: String
  bookDescription: String
  bookPhotoUrl: String
  categoryName: String
  author: String
  libraryName: String
  reviewContent: String
  rating: Int
}

# SHELF

input ContainBookInShelfRequest {
  isbn13List: [String]
  userId: Int
}

type ContainBookInShelfResponse {
  msg: String
  shelfName: String
  isbn13List: [String]
}

input GetBooksInShelfRequest {
  shelfId: Int
}

type Query {
  searchBooksAndGetBookInfo(searchOption: SearchOption): [GetBookInfoItem]
  getBookInfo(getBookInfoRequest: GetBookInfoRequest): GetBookInfoItem
  getRecommendBookList(request: recommendBookListRequest!): [GetBookInfoItem]
  user(id: ID): User
  users: [User]!
  getFeed: [Feed]!
  getBooksInShelf(request: GetBooksInShelfRequest): [GetBookInfoItem]
  reviews(isbn: String!): [Review!]!
  review(id: ID!): Review
}

type Mutation {
  createUser(username: String!, name: String!): User
  containBookInShelf(request: ContainBookInShelfRequest): ContainBookInShelfResponse
  createReview(createReviewArgs: CreateReviewArgs!): Review
  UpdateReview(updateReviewArgs: UpdateReviewArgs!): Review
  DeleteReview(id: ID!): Review
}

type User {
  id: ID!
  username: String!
  name: String!
}

# FEATURE/REVIEW

type Review {
  id: ID!
  userId: ID!
  isbn: String!
  rating: Int!
  content: String
}

input CreateReviewArgs {
  userId: ID!
  isbn: String!
  rating: Int!
  content: String
}

input UpdateReviewArgs {
  id: ID!
  rating: Int!
  content: String
}
