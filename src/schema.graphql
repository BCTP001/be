scalar Void

# SEARCH BOOKS

input SearchOption {
  searchQuery: String!
  queryType: String
  sort: String
  maxResult: String
}

# GET BOOK INFO

input GetBookInfoRequest {
  isbn13: String!
}

type Author {
  authorType: String
  authorid: Int
  desc: String
  name: String
}

type Ebook {
  itemId: Int
  isbn: String
  priceSales: Int
  link: String
}

type Bookinfo {
  subTitle: String
  originalTitle: String
  itemPage: Int
  toc: String
  letslookimg: [String]
  author: [Author]
  ebookList: [Ebook]
}

type GetBookInfoItem {
  title: String
  link: String
  author: String
  pubDate: String
  description: String
  creator: String
  isbn: String
  isbn13: String
  itemId: Int
  priceSales: Int
  priceStandard: Int
  stockStatus: String
  mileage: Int
  cover: String
  categoryId: Int
  categoryName: String
  publisher: String
  customerReivewRank: Int
  bookinfo: Bookinfo
}

# RECOMMEND BOOK LIST

input recommendBookListRequest {
  queryType: RecommendQueryType!
}

enum RecommendQueryType {
  ItemNewAll
  ItemNewSpecial
  Bestseller
  BlogBest
}

# FEED

type Feed {
  isbn13: String!
  bookName: String
  bookDescription: String
  bookPhotoUrl: String
  categoryName: String
  author: String
  libraryName: String
  reviewContent: String
  rating: Int
}

# SHELF

input GetBooksInShelfRequest {
  shelfName: String
}

input UpdateShelfRequest {
  containList: [String]
  excludeList: [String]
  shelfName: String
}

type UpdateShelfResponse {
  msg: String
  shelfName: String
}

input CreateShelfRequest {
  shelfName: String
  userId: Int!
}

type CreateShelfResponse {
  msg: String
}

input UpdateLikeBooksRequest {
  containList: [String]
  excludeList: [String]
}

type UpdateLikeBooksResponse {
  msg: String
}

input RecommendBooksRequest{
  keyword: String
  top_n: Int
}

type RecommendBookInfo {
  title: String
  description: String
  category: String
  cover: String
  author: String
}

enum RequestBookType {
  ADD
  REMOVE
}

input RequestBookInLibraryRequest {
  type: RequestBookType
  isbn: String
  libraryId: Int
}

type RequestBookInLibraryResponse {
  msg: String
}

type Query {
  searchBooksAndGetBookInfo(searchOption: SearchOption!): [GetBookInfoItem]
  getBookInfo(getBookInfoRequest: GetBookInfoRequest!): GetBookInfoItem
  getRecommendBookList(request: recommendBookListRequest!): [GetBookInfoItem]
  user(id: Int!): User
  users: [User]!
  getFeed: [Feed]!
  getBooksInShelf(request: GetBooksInShelfRequest!): [GetBookInfoItem]
  getLikeBooks: [GetBookInfoItem]
  reviews(isbn: String!): [Review!]!
  review(id: Int!): Review
  recommendBooks(request: RecommendBooksRequest): [RecommendBookInfo]
  librariesByUser: [LibraryWithAuthority!]!
  librariesByBook(isbn: String!): [LibraryWithAuthority!]!
  usersByLibrary(libraryId: Int!): [UserWithAuthority!]!
}

type Mutation {
  createShelf(request: CreateShelfRequest!): CreateShelfResponse
  updateShelf(request: UpdateShelfRequest!): UpdateShelfResponse
  updateLikeBooks(request: UpdateLikeBooksRequest!): UpdateLikeBooksResponse
  createReview(createReviewArgs: CreateReviewArgs!): Int!
  updateReview(updateReviewArgs: UpdateReviewArgs!): Int!
  deleteReview(id: Int!): Int!
  signUp(name: String!, username: String!, password: String!): User
  signIn(username: String!, password: String!): WelcomePackage
  signOut: Void
  createLibrary(name: String!): Int!
  requestBookInLibrary(request: RequestBookInLibraryRequest): RequestBookInLibraryResponse
}

type WelcomePackage {
  signedInAs: User!
}

type User {
  id: Int!
  username: String!
  name: String!
  profilePic: String
  bio: String
}

# FEATURE/REVIEW

type Review {
  id: Int!
  userId: Int!
  isbn: String!
  rating: Int!
  content: String
}

input CreateReviewArgs {
  userId: Int!
  isbn: String!
  rating: Int!
  content: String
}

input UpdateReviewArgs {
  id: Int!
  rating: Int!
  content: String
}

# Feature "library"

type LibraryWithAuthority {
  id: Int!
  name: String
  authority: String
}

type UserWithAuthority {
  user: User!
  authority: String!
}